{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AccountBalance from './components/AccountBalance';\nimport { v4 as uuidv4 } from 'uuid';\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n_c = Div;\nconst COIN_COUNT = 10;\n\nconst formatPrice = price => parseFloat(Number(price).toFixed(3));\n\nfunction App(props) {\n  _s();\n\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(response => {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price)\n      };\n    });\n    setCoinData(coinPriceData);\n  };\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  };\n\n  const handleRefresh = async valueChangeId => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map(function (values) {\n      let newValues = { ...values\n      };\n\n      if (valueChangeId === values.ticker) {\n        newValues.price = newPrice;\n      }\n\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Div, {\n    children: [/*#__PURE__*/_jsxDEV(ExchangeHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountBalance // ticker={ticker} \n    , {\n      amount: balance,\n      showBalance: showBalance,\n      handleBalanceVisibilityChange: handleBalanceVisibilityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoinList, {\n      coinData: coinData,\n      handleRefresh: handleRefresh,\n      showBalance: showBalance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8Q7K93y42+0BoTT9L7f/QY6r280=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Div\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js"],"names":["React","useState","AccountBalance","v4","uuidv4","CoinList","ExchangeHeader","styled","axios","Div","div","COIN_COUNT","formatPrice","price","parseFloat","Number","toFixed","App","props","balance","setBalance","showBalance","setShowBalance","coinData","setCoinData","componentDidMount","response","get","coinIds","data","slice","map","coin","id","tickerUrl","promises","Promise","all","coinPriceData","key","name","ticker","symbol","quotes","USD","handleBalanceVisibilityChange","oldValue","handleRefresh","valueChangeId","newPrice","newCoinData","values","newValues"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport AccountBalance from './components/AccountBalance'\nimport { v4 as uuidv4 } from 'uuid'\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(3));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins')\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map( response => {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    })\n    setCoinData(coinPriceData);\n  }\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function(values) {\n      let newValues = { ...values };\n\n      if(valueChangeId === values.ticker) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  return (\n    <Div>\n      <ExchangeHeader />\n      <AccountBalance \n        // ticker={ticker} \n        amount={balance} \n        showBalance={showBalance} \n        handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n      <CoinList \n        coinData={coinData} \n        handleRefresh={handleRefresh} \n        showBalance={showBalance}/>\n    </Div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}