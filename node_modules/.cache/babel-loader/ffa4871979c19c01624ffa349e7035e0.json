{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js\";\nimport React from 'react';\nimport AccountBalance from './components/AccountBalance';\nimport { v4 as uuidv4 } from 'uuid';\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components';\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n_c = Div;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 10000,\n      balanceShown: true,\n      coinData: [{\n        name: 'Bitcoin',\n        ticker: 'BTC',\n        price: 35000\n      }, {\n        name: 'Ethereum',\n        ticker: 'ETH',\n        price: 1400\n      }, {\n        name: 'Tether',\n        ticker: 'USDT',\n        price: 1\n      }, {\n        name: 'Ripple',\n        ticker: 'XRP',\n        price: 0.50\n      }, {\n        name: 'Polkadot',\n        ticker: 'DOT',\n        price: 15.95\n      }, {\n        name: 'Cardano',\n        ticker: 'ADA',\n        price: 0.42\n      }, {\n        name: 'Chainlink',\n        ticker: 'LINK',\n        price: 22.38\n      }, {\n        name: 'Uniswap',\n        ticker: 'UNI',\n        price: 19.56\n      }]\n    };\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.handleBalance = this.handleBalance.bind(this);\n  }\n\n  handleRefresh(valueChangeTicker) {\n    // make a const newCoinData and map it with the old coinDate (destructured)\n    const newCoinData = this.state.coinData.map(({\n      name,\n      ticker,\n      price\n    }) => {\n      // declare a new price variable and bind to original price amount\n      let newPrice = price; // control flow: if the valueChangeTicker matches the ticker in coinData, \n      // calculate new price and then bind that price to newPrice\n\n      if (valueChangeTicker === ticker) {\n        let randomPercentage = 0.995 + Math.random() * 0.01;\n        newPrice = Math.floor(price * randomPercentage * 1000) / 1000;\n      } // return that object to the newCoinData array for that iteration\n\n\n      return {\n        name,\n        ticker,\n        price: newPrice\n      };\n    }); // after we finish the mapping, swap the newCoinData for the original coinData in state\n\n    this.setState({\n      coinData: newCoinData\n    });\n  }\n\n  handleBalance() {\n    if (this.state.balanceShown == true) {\n      this.state.balanceShown = false;\n    } else {\n      this.state.balanceShown = true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Div, {\n      children: [/*#__PURE__*/_jsxDEV(ExchangeHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccountBalance, {\n        ticker: this.state.ticker,\n        amount: this.state.balance,\n        showBalance: this.state.balanceShown,\n        handleBalance: this.state.handleBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CoinList, {\n        coinData: this.state.coinData,\n        handleRefresh: this.handleRefresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Div\");","map":{"version":3,"sources":["/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js"],"names":["React","AccountBalance","v4","uuidv4","CoinList","ExchangeHeader","styled","Div","div","App","Component","constructor","props","state","balance","balanceShown","coinData","name","ticker","price","handleRefresh","bind","handleBalance","valueChangeTicker","newCoinData","map","newPrice","randomPercentage","Math","random","floor","setState","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport AccountBalance from './components/AccountBalance'\nimport { v4 as uuidv4 } from 'uuid'\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components'\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 10000,\n      balanceShown: true,\n      coinData: [\n        {\n          name: 'Bitcoin',\n          ticker: 'BTC',\n          price: 35000\n        },\n        {\n          name: 'Ethereum',\n          ticker: 'ETH',\n          price: 1400\n        },\n        {\n          name: 'Tether',\n          ticker: 'USDT',\n          price: 1\n        },\n        {\n          name: 'Ripple',\n          ticker: 'XRP',\n          price: 0.50\n        },\n        {\n          name: 'Polkadot',\n          ticker: 'DOT',\n          price: 15.95\n        },\n        {\n          name: 'Cardano',\n          ticker: 'ADA',\n          price: 0.42\n        },\n        {\n          name: 'Chainlink',\n          ticker: 'LINK',\n          price: 22.38\n        },\n        {\n          name: 'Uniswap',\n          ticker: 'UNI',\n          price: 19.56\n        }\n      ]\n    }\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.handleBalance = this.handleBalance.bind(this);\n  }\n\n  handleRefresh(valueChangeTicker) {\n    // make a const newCoinData and map it with the old coinDate (destructured)\n    const newCoinData = this.state.coinData.map(({name, ticker, price}) => {\n      // declare a new price variable and bind to original price amount\n      let newPrice = price;\n      // control flow: if the valueChangeTicker matches the ticker in coinData, \n      // calculate new price and then bind that price to newPrice\n      if(valueChangeTicker === ticker) {\n        let randomPercentage = 0.995 + Math.random() * 0.01\n        newPrice = Math.floor((price * randomPercentage)*1000)/1000\n      }\n      // return that object to the newCoinData array for that iteration\n      return {\n        name,\n        ticker,\n        price: newPrice\n      }\n    })\n    // after we finish the mapping, swap the newCoinData for the original coinData in state\n    this.setState({coinData: newCoinData})\n  }\n\n  handleBalance() {\n    if(this.state.balanceShown == true) {\n      this.state.balanceShown = false;\n    } else {\n      this.state.balanceShown = true;\n    }\n  }\n\n  render() {\n    return (\n      <Div>\n        <ExchangeHeader />\n        <AccountBalance ticker={this.state.ticker} amount={this.state.balance} showBalance={this.state.balanceShown} handleBalance={this.state.handleBalance} />\n        <CoinList coinData={this.state.coinData} handleRefresh={this.handleRefresh}/>\n      </Div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}