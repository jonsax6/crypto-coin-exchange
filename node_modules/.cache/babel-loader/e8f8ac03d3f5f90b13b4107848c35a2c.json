{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js\";\nimport React from 'react';\nimport AccountBalance from './components/AccountBalance';\nimport { v4 as uuidv4 } from 'uuid';\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n_c = Div;\nconst COIN_COUNT = 10;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      balance: 10000,\n      showBalance: true,\n      coinData: [// {\n        //   name: 'Bitcoin',\n        //   ticker: 'BTC',\n        //   price: 35000,\n        //   balance: 0.5\n        // },\n        // {\n        //   name: 'Ethereum',\n        //   ticker: 'ETH',\n        //   price: 1400,\n        //   balance: 87\n        // },\n        // {\n        //   name: 'Tether',\n        //   ticker: 'USDT',\n        //   price: 1,\n        //   balance: 20000\n        // },\n        // {\n        //   name: 'Ripple',\n        //   ticker: 'XRP',\n        //   price: 0.50,\n        //   balance: 104844\n        // },\n        // {\n        //   name: 'Polkadot',\n        //   ticker: 'DOT',\n        //   price: 15.95,\n        //   balance: 904\n        // },\n        // {\n        //   name: 'Cardano',\n        //   ticker: 'ADA',\n        //   price: 0.42,\n        //   balance: 39456\n        // },\n        // {\n        //   name: 'Chainlink',\n        //   ticker: 'LINK',\n        //   price: 22.38,\n        //   balance: 500\n        // },\n        // {\n        //   name: 'Uniswap',\n        //   ticker: 'UNI',\n        //   price: 19.56,\n        //   balance: 475\n        // }\n      ]\n    };\n\n    this.componentDidMount = () => {\n      axios.get('https://api.coinpaprika.com/v1/coins').then(response => {\n        debugger;\n        let coinData = response.data.slice(0, COIN_COUNT).map(coin => {\n          return {\n            key: coin.id,\n            name: coin.name,\n            ticker: coin.symbol,\n            price: 0,\n            balance: 0\n          };\n        });\n        this.setState({\n          coinData\n        });\n      });\n    };\n\n    this.handleBalanceVisibilityChange = () => {\n      this.setState(function (oldState) {\n        return { ...oldState,\n          showBalance: !oldState.showBalance\n        };\n      });\n    };\n\n    this.handleRefresh = valueChangeTicker => {\n      // make a const newCoinData and map it with the old coinDate (destructured)\n      const newCoinData = this.state.coinData.map(function (values) {\n        // declare a new price variable and bind to original price amount\n        let newValues = { ...values\n        }; // control flow: if the valueChangeTicker matches the ticker in coinData, \n        // calculate new price and then bind that price to newPrice\n\n        if (valueChangeTicker === values.ticker) {\n          let randomPercentage = 0.995 + Math.random() * 0.01;\n          newValues.price = Math.floor(newValues.price * randomPercentage * 1000) / 1000;\n        } // return that object to the newCoinData array for that iteration\n\n\n        return newValues;\n      }); // after we finish the mapping, swap the newCoinData for the original coinData in state\n\n      this.setState({\n        coinData: newCoinData\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Div, {\n      children: [/*#__PURE__*/_jsxDEV(ExchangeHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccountBalance, {\n        ticker: this.state.ticker,\n        amount: this.state.balance,\n        showBalance: this.state.showBalance,\n        handleBalanceVisibilityChange: this.handleBalanceVisibilityChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CoinList, {\n        coinData: this.state.coinData,\n        handleRefresh: this.handleRefresh,\n        showBalance: this.state.showBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Div\");","map":{"version":3,"sources":["/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js"],"names":["React","AccountBalance","v4","uuidv4","CoinList","ExchangeHeader","styled","axios","Div","div","COIN_COUNT","App","Component","state","balance","showBalance","coinData","componentDidMount","get","then","response","data","slice","map","coin","key","id","name","ticker","symbol","price","setState","handleBalanceVisibilityChange","oldState","handleRefresh","valueChangeTicker","newCoinData","values","newValues","randomPercentage","Math","random","floor","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport AccountBalance from './components/AccountBalance'\nimport { v4 as uuidv4 } from 'uuid'\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\n\nclass App extends React.Component {\n  state = {\n    balance: 10000,\n    showBalance: true,\n    coinData: [\n      // {\n      //   name: 'Bitcoin',\n      //   ticker: 'BTC',\n      //   price: 35000,\n      //   balance: 0.5\n      // },\n      // {\n      //   name: 'Ethereum',\n      //   ticker: 'ETH',\n      //   price: 1400,\n      //   balance: 87\n      // },\n      // {\n      //   name: 'Tether',\n      //   ticker: 'USDT',\n      //   price: 1,\n      //   balance: 20000\n      // },\n      // {\n      //   name: 'Ripple',\n      //   ticker: 'XRP',\n      //   price: 0.50,\n      //   balance: 104844\n      // },\n      // {\n      //   name: 'Polkadot',\n      //   ticker: 'DOT',\n      //   price: 15.95,\n      //   balance: 904\n      // },\n      // {\n      //   name: 'Cardano',\n      //   ticker: 'ADA',\n      //   price: 0.42,\n      //   balance: 39456\n      // },\n      // {\n      //   name: 'Chainlink',\n      //   ticker: 'LINK',\n      //   price: 22.38,\n      //   balance: 500\n      // },\n      // {\n      //   name: 'Uniswap',\n      //   ticker: 'UNI',\n      //   price: 19.56,\n      //   balance: 475\n      // }\n    ]\n  }\n\ncomponentDidMount = () => {\n  axios.get('https://api.coinpaprika.com/v1/coins')\n    .then( response => { \n      debugger;\n      let coinData = response.data.slice(0, COIN_COUNT).map( coin => {\n        return {\n          key: coin.id,\n          name: coin.name,\n          ticker: coin.symbol,\n          price: 0,\n          balance: 0\n        }\n      })\n      this.setState({coinData})\n    })\n}\n\n  // componentDidMount = () => {\n  //   axios.get('https://api.coinpaprika.com/v1/coins')\n  //     .then( response => {\n  //       let coinData = response.data.slice(0, COIN_COUNT).map( function(coin) {\n  //         return {\n  //           key: coin.id,\n  //           name: coin.name,\n  //           ticker: coin.symbol,\n  //           balance: 0,\n  //           price: 0\n  //         };\n  //       });\n  //       console.log('setting state');\n  //       this.setState({ coinData });\n  //       console.log('Done setting state');\n  //     })\n  //     console.log('CDM is DONE')\n  // }\n\n\n  handleBalanceVisibilityChange = () => {\n    this.setState( function(oldState) {\n      return {\n        ...oldState,\n        showBalance: !oldState.showBalance\n      }\n\n    })\n  }\n\n  handleRefresh = (valueChangeTicker) => {\n    // make a const newCoinData and map it with the old coinDate (destructured)\n    const newCoinData = this.state.coinData.map( function(values) {\n      // declare a new price variable and bind to original price amount\n      let newValues = { ...values };\n      // control flow: if the valueChangeTicker matches the ticker in coinData, \n      // calculate new price and then bind that price to newPrice\n      if(valueChangeTicker === values.ticker) {\n        let randomPercentage = 0.995 + Math.random() * 0.01\n        newValues.price = Math.floor((newValues.price * randomPercentage)*1000)/1000\n      }\n      // return that object to the newCoinData array for that iteration\n      return newValues\n    });\n    // after we finish the mapping, swap the newCoinData for the original coinData in state\n    this.setState({coinData: newCoinData})\n  }\n\n  render() {\n    return (\n      <Div>\n        <ExchangeHeader />\n        <AccountBalance \n          ticker={this.state.ticker} \n          amount={this.state.balance} \n          showBalance={this.state.showBalance} \n          handleBalanceVisibilityChange={this.handleBalanceVisibilityChange} />\n        <CoinList \n          coinData={this.state.coinData} \n          handleRefresh={this.handleRefresh} \n          showBalance={this.state.showBalance}/>\n      </Div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}