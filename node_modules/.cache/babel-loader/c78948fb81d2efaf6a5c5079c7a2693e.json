{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js\";\nimport React from 'react';\nimport AccountBalance from './components/AccountBalance';\nimport { v4 as uuidv4 } from 'uuid';\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components';\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n_c = Div;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      balance: 10000,\n      showBalance: true,\n      coinData: [{\n        name: 'Bitcoin',\n        ticker: 'BTC',\n        price: 35000,\n        balance: 0.5\n      }, {\n        name: 'Ethereum',\n        ticker: 'ETH',\n        price: 1400,\n        balance: 87\n      }, {\n        name: 'Tether',\n        ticker: 'USDT',\n        price: 1,\n        balance: 20000\n      }, {\n        name: 'Ripple',\n        ticker: 'XRP',\n        price: 0.50,\n        balance: 104844\n      }, {\n        name: 'Polkadot',\n        ticker: 'DOT',\n        price: 15.95,\n        balance: 904\n      }, {\n        name: 'Cardano',\n        ticker: 'ADA',\n        price: 0.42,\n        balance: 39456\n      }, {\n        name: 'Chainlink',\n        ticker: 'LINK',\n        price: 22.38,\n        balance: 500\n      }, {\n        name: 'Uniswap',\n        ticker: 'UNI',\n        price: 19.56,\n        balance: 475\n      }]\n    };\n\n    this.componentDidMount = () => {\n      console.log('MOUNT');\n    };\n\n    this.componentDidUpdate = () => {\n      console.log('UPDATE');\n    };\n\n    this.handleBalanceVisibilityChange = () => {\n      this.setState(function (oldState) {\n        return { ...oldState,\n          showBalance: !oldState.showBalance\n        };\n      });\n    };\n\n    this.handleRefresh = valueChangeTicker => {\n      // make a const newCoinData and map it with the old coinDate (destructured)\n      const newCoinData = this.state.coinData.map(values => {\n        // declare a new price variable and bind to original price amount\n        let newValues = { ...values\n        }; // control flow: if the valueChangeTicker matches the ticker in coinData, \n        // calculate new price and then bind that price to newPrice\n\n        if (valueChangeTicker === values.ticker) {\n          let randomPercentage = 0.995 + Math.random() * 0.01;\n          newValues.price = Math.floor(price * randomPercentage * 1000) / 1000;\n        } // return that object to the newCoinData array for that iteration\n\n\n        return {\n          name: newValues.name,\n          ticker: newValues.ticker,\n          price: newValues.price,\n          balance: newValues\n        };\n      }); // after we finish the mapping, swap the newCoinData for the original coinData in state\n\n      this.setState({\n        coinData: newCoinData\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Div, {\n      children: [/*#__PURE__*/_jsxDEV(ExchangeHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccountBalance, {\n        ticker: this.state.ticker,\n        amount: this.state.balance,\n        showBalance: this.state.showBalance,\n        handleBalanceVisibilityChange: this.handleBalanceVisibilityChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CoinList, {\n        coinData: this.state.coinData,\n        handleRefresh: this.handleRefresh,\n        showBalance: this.state.showBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Div\");","map":{"version":3,"sources":["/Users/jonathancole/Documents/GitHub/coin-exchange/src/App.js"],"names":["React","AccountBalance","v4","uuidv4","CoinList","ExchangeHeader","styled","Div","div","App","Component","state","balance","showBalance","coinData","name","ticker","price","componentDidMount","console","log","componentDidUpdate","handleBalanceVisibilityChange","setState","oldState","handleRefresh","valueChangeTicker","newCoinData","map","values","newValues","randomPercentage","Math","random","floor","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport AccountBalance from './components/AccountBalance'\nimport { v4 as uuidv4 } from 'uuid'\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components'\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n\nclass App extends React.Component {\n  state = {\n    balance: 10000,\n    showBalance: true,\n    coinData: [\n      {\n        name: 'Bitcoin',\n        ticker: 'BTC',\n        price: 35000,\n        balance: 0.5\n      },\n      {\n        name: 'Ethereum',\n        ticker: 'ETH',\n        price: 1400,\n        balance: 87\n      },\n      {\n        name: 'Tether',\n        ticker: 'USDT',\n        price: 1,\n        balance: 20000\n      },\n      {\n        name: 'Ripple',\n        ticker: 'XRP',\n        price: 0.50,\n        balance: 104844\n      },\n      {\n        name: 'Polkadot',\n        ticker: 'DOT',\n        price: 15.95,\n        balance: 904\n      },\n      {\n        name: 'Cardano',\n        ticker: 'ADA',\n        price: 0.42,\n        balance: 39456\n      },\n      {\n        name: 'Chainlink',\n        ticker: 'LINK',\n        price: 22.38,\n        balance: 500\n      },\n      {\n        name: 'Uniswap',\n        ticker: 'UNI',\n        price: 19.56,\n        balance: 475\n      }\n    ]\n  }\n\n  componentDidMount = () => {\n    console.log('MOUNT')\n  }\n\n  componentDidUpdate = () => {\n    console.log('UPDATE')\n  }\n\n  handleBalanceVisibilityChange = () => {\n    this.setState( function(oldState) {\n      return {\n        ...oldState,\n        showBalance: !oldState.showBalance\n      }\n\n    })\n  }\n\n  handleRefresh = (valueChangeTicker) => {\n    // make a const newCoinData and map it with the old coinDate (destructured)\n    const newCoinData = this.state.coinData.map((values) => {\n      // declare a new price variable and bind to original price amount\n      let newValues = { ...values };\n      // control flow: if the valueChangeTicker matches the ticker in coinData, \n      // calculate new price and then bind that price to newPrice\n      if(valueChangeTicker === values.ticker) {\n        let randomPercentage = 0.995 + Math.random() * 0.01\n        newValues.price = Math.floor((price * randomPercentage)*1000)/1000\n      }\n      // return that object to the newCoinData array for that iteration\n      return {\n        name: newValues.name,\n        ticker: newValues.ticker,\n        price: newValues.price,\n        balance: newValues\n      }\n    })\n    // after we finish the mapping, swap the newCoinData for the original coinData in state\n    this.setState({coinData: newCoinData})\n  }\n\n  render() {\n    return (\n      <Div>\n        <ExchangeHeader />\n        <AccountBalance \n          ticker={this.state.ticker} \n          amount={this.state.balance} \n          showBalance={this.state.showBalance} \n          handleBalanceVisibilityChange={this.handleBalanceVisibilityChange} />\n        <CoinList \n          coinData={this.state.coinData} \n          handleRefresh={this.handleRefresh} \n          showBalance={this.state.showBalance}/>\n      </Div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}