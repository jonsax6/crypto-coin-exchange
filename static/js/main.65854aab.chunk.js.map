{"version":3,"sources":["components/AccountBalance.jsx","components/Coin.jsx","components/CoinList.jsx","candlestick.png","components/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","AccountBalance","props","buttonText","showBalance","amount","onClick","handleBalanceVisibilityChange","Td","td","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Img","img","Header","header","H1","h1","ExchangeHeader","src","candlestick","alt","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65854aab.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst Section = styled.section`\n  font-size: 2rem;\n  text-align: left;\n  padding: 1.5rem 0 1.5rem 5rem;\n`;\n\nexport default function AccountBalance(props) {\n  const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n  return (\n    <Section>\n      {props.showBalance ? <span>Balance: ${props.amount}&nbsp;&nbsp;</span> : null}\n      <button onClick={props.handleBalanceVisibilityChange}>{buttonText}</button>\n    </Section>\n  );\n}\n\nAccountBalance.propTypes = {\n  amount: PropTypes.number.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst Td = styled.td`\n  border: 1px solid #cccccc;\n  width: 25vh;\n`;\n\nexport default function Coin(props) {\n  const handleClick = (event) => {\n    // prevent default action\n    event.preventDefault();\n    props.handleRefresh(props.tickerId)\n  }\n\n  return(\n      <tr>\n          <Td>{props.name}</Td>\n          <Td>{props.ticker}</Td>\n          <Td>${props.price}</Td>\n          {props.showBalance ? <Td>{props.balance}</Td> : null}\n          <Td>\n            <form action=\"#\" method=\"POST\">\n              <button onClick={handleClick}>Refresh</button>\n            </form>\n          </Td>\n      </tr>\n  )\n}\n\nCoin.propTypes = {\n  name: PropTypes.string.isRequired,\n  ticker: PropTypes.string.isRequired,\n  // price: PropTypes.number.isRequired\n}\n\n","import React from 'react'\nimport Coin from './Coin'\nimport styled from 'styled-components'\n\nconst Table = styled.table`\n  margin: 50px auto 50px auto;\n  display: inline-block;\n  font-size: 1.4rem;\n`;\n\nexport default function CoinList(props) {\n  return (\n    <Table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Ticker</th>\n        <th>Price</th>\n        {props.showBalance ? <th>Balance</th> : null}\n        <th>Refresh</th>\n      </tr>\n    </thead>\n    <tbody>\n      {\n        props.coinData.map( ({ key, name, ticker, balance, price }) => \n          <Coin \n            key={key} \n            handleRefresh={props.handleRefresh} \n            name={name} \n            ticker={ticker} \n            balance={balance}\n            showBalance={props.showBalance}\n            price={price}\n            tickerId = {key} />)\n      }\n    </tbody>\n  </Table>\n  )\n}\n\n","export default __webpack_public_path__ + \"static/media/candlestick.9353e5d2.png\";","import React from 'react'\nimport candlestick from '../candlestick.png'\nimport styled from 'styled-components'\n\nconst Img = styled.img`\n  height: 6rem;\n  pointer-events: none;\n`;\n\nconst Header = styled.header`\n  background: #1e3342;\n  min-height: 10vh;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  color: white;\n`;\n\nconst H1 = styled.h1`\n  font-size: 4rem;\n`;\n\nexport default function ExchangeHeader(props){\n  return (\n    <div>\n      <Header>\n        <Img src={candlestick} alt=\"React logo\" />\n        <H1>\n          Coin Exchange\n        </H1>\n      </Header>\n    </div>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport AccountBalance from './components/AccountBalance'\nimport { v4 as uuidv4 } from 'uuid'\nimport CoinList from './components/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(3));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins')\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map( response => {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    })\n    setCoinData(coinPriceData);\n  }\n\nuseEffect(() => {\n  if(coinData.length === 0) {\n    componentDidMount();\n  } \n});\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function(values) {\n      let newValues = { ...values };\n\n      if(valueChangeId === values.ticker) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  return (\n    <Div>\n      <ExchangeHeader />\n      <AccountBalance \n        amount={balance} \n        showBalance={showBalance} \n        handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n      <CoinList \n        coinData={coinData} \n        handleRefresh={handleRefresh} \n        showBalance={showBalance}/>\n    </Div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}